//------------------------------------------------------------//
// array 타입 지정
//------------------------------------------------------------//
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
// array 타입지정 / union 타입지정
var 멍멍 = ['dog', true];
//------------------------------------------------------------//
// tuple type
// 첫 자료는 무조건 string, 둘째 자료는 무조건 boolean(위치까지 고려한 타입지정 가능)
// 자료의 위치까지 지정하기 때문에 각 위치에 다른 것 들어오면 에러
// 모든 타입 넣을 수 있음
//------------------------------------------------------------//
var 멍멍2 = ['dog', true];
//------------------------------------------------------------//
// tuple 안에 옵션표시 가능
//------------------------------------------------------------//
// 2번째 자료 들어올지말지 모름 ? 붙이기
var 멍멍3 = ['dog'];
//------------------------------------------------------------//
// 중간에는 올 수 없음
// 2번째자료가 올지말지 모르면, 3번째 옵션의 순서가 보장이 되지 않기 때문에
// let 멍멍4 : [string, boolean?, number] = ['dog']
//------------------------------------------------------------//
// 물음표?는 마지막 순서에만 표시 가능
var 멍멍5 = ['dog', true];
//------------------------------------------------------------//
// 2개도 표시 가능하지만, 항상 뒤에서부터 물음표 시작해야함!
var 멍멍6 = ['dog', true];
//------------------------------------------------------------//
// 함수에서 쓰는 tuple
// - rest parameter 타입지정시 tuple 가능
//------------------------------------------------------------//
// rest parameter type
function 함수우() {
    var x = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        x[_i] = arguments[_i];
    }
    console.log(x); // rest parameter 써서 들어왔으면 array [] 안에 받은 파라미터들 넣어서 출력됨
}
함수우(1, 2, 3, 4, 5, 6); // [1,2,3,4,5,6]
//------------------------------------------------------------//
// rest parameter type
function 함수우2() {
    var x = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        x[_i] = arguments[_i];
    }
    console.log(x);
}
함수우2(1, 'hello'); // [1,'hello']
//------------------------------------------------------------//
// 바로 위에 거랑 이거랑 다른 것은 없지만.. 차이점은 rest parameter은 array에 담겨온다
function 함수우3(a, b) {
    console.log([a, b]);
}
함수우3(100, 'hi');
//------------------------------------------------------------//
// array 합칠 때
//------------------------------------------------------------//
var arr10 = [1, 2, 3];
var arr11 = __spreadArray([4, 5], arr10, true); // arr11에 arr10 넣고 싶으면 ... spread 연산자 사용
// let arr12 = [4,5, arr10];
//------------------------------------------------------------//
// type 지정할 때 tuple 쓸 수 있음
// array가 들어오는데 아직 몇개인지 모를 때 사용
var arr12 = __spreadArray([4, 5], arr10, true);
