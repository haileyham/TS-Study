//------------------------------------------------------------//
// 함수 type alias
//------------------------------------------------------------//

//type alias에 함수 type 저장해서 사용
type 함수타입1 = () => {};
type 함수타입2 = (a: string) => number; // 파라미터 string, return은 number (return이랑 {} 생략해서 사용)

// 함수 type alias 사용하려면 '함수표현식' 사용
let 함수10 : 함수타입2 = function (a) {
    return parseInt(a) + 10;
}

console.log(함수10('1'));

//1. 함수타입은  () => {} 화살표함수
//2. 함수표현식에서만 type alias 사용가능

//복습
//function 함수 (){} : 함수선언식(호이스팅 영향O)
//let 함수 = function (){}  : 함수표현식(호이스팅 영향X / 클로져 / 인자전달 / 콜백)

//------------------------------------------------------------//
// 메서드 안에 타입지정
//------------------------------------------------------------//

//method 함수
//object 안에 함수의 타입지정 
let 회원정보 = {
    name: 'ham',
    plusOne(x) {
        return x + 1;
    },
    changeName: () => {
        console.log('안녕');
    }
}

console.log(회원정보.plusOne(3)); //회원정보 안의 함수가 실행(method 함수)
회원정보.changeName();

//------------------------------------------------------------//

// [1]
//메서드 함수내에 타입지정해서 사용해보기

type MemberInfoType = {
    name: string,
    plusOne : (x: number) => number,
    changeName : () => void
}

let 회원정보2: MemberInfoType = {
    name: 'ham',
    plusOne(x) {
        return x + 1;
    },
    changeName: () => {
        console.log('안녕')
        return '안녕리턴'
    }
}

console.log(회원정보2.plusOne(100)); //회원정보 안의 함수가 실행(method 함수)
console.log(회원정보2.changeName()); //return 값 안넣으면 changeName() 실행값으로는 undefined뜸. 안에 console.log('안녕')이랑 undefined랑 동시 출력됨. return 값으로 '안녕리턴' 넣으면, '안녕'과 '안녕리턴' 동시출력

//------------------------------------------------------------//
// 콜백함수 복습
//------------------------------------------------------------//

function 함수20(a) {
    a()
}
function 함수21() {
    
}

함수20(함수21);

//1. 함수 20 내부 코드 a() 실행
//2. 파라미터를 a 자리에 집어넣어서 함수21() 실행

//------------------------------------------------------------//
//------------------------------------------------------------//

